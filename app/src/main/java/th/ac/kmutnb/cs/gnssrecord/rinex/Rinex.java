package th.ac.kmutnb.cs.gnssrecord.rinex;

import android.content.Context;
import android.os.Environment;
import android.util.Log;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import th.ac.kmutnb.cs.gnssrecord.R;
import th.ac.kmutnb.cs.gnssrecord.model.RinexData;
import th.ac.kmutnb.cs.gnssrecord.model.RinexHeader;

public class Rinex {
    private static final String TAG = Rinex.class.getSimpleName();

    private FileWriter out = null;
    private char line[] = new char[81];

    private Context context;

    public Rinex(Context context) {
        this.context = context;
        createFile();
    }

    public void closeFile() {
        Log.i(TAG, "CloseFile");
        try {
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void resetLine() {
        for (int i = 0; i < 80; i++)
            line[i] = ' ';
    }

    private void writeLine(String label) {
        for (int i = 0; i < label.length(); i++)
            line[i + 60] = label.charAt(i);
        try {
            line[80] = '\n';
            out.write(line);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void createFile() {
        Date date = new Date();

        String dateString = new SimpleDateFormat("yyyyMMddhhmmss", Locale.US).format(date);
        String type = "o"; //Observable file
        int year = 18; //TODO
        String yearString;
        if (year - 10 < 0)
            yearString = "0" + year;
        else
            yearString = "" + year;
        String fileName = "GN" + dateString + "." + yearString + type;

        try {
            File rootFile = new File(Environment.getExternalStorageDirectory(), context.getString(R.string.app_name)+"_Rinex");
            if (!rootFile.exists()) rootFile.mkdirs();

            File file = new File(rootFile, fileName);
            out = new FileWriter(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Log.i(TAG, "CreateFile, File name = " + fileName);
    }

    public void writeHeader(RinexHeader rinexHeader) { //header labels in columns 61-80
        Log.i(TAG, "WriteHeader");
        char satelliteIdentifier[] = {'G', 'R', 'E', 'C', 'J'};
        Date date = new Date();

        //RINEX VERSION / TYPE
        resetLine();
        String version = "3.03";
        String type = "OBSERVATION DATA";
        String source = "M: Mixed";
        for (int i = 0; i < version.length(); i++)
            line[i + 4] = version.charAt(i);
        for (int i = 0; i < type.length(); i++)
            line[i + 20] = type.charAt(i);
        for (int i = 0; i < source.length(); i++)
            line[i + 40] = source.charAt(i);
        writeLine("RINEX VERSION / TYPE");


        //PGM / RUN BY / DATE
        resetLine();
        String program = "GnssRecord";
        String agency = "KMUTNB";
        String dateCreation = new SimpleDateFormat("yyyyMMdd hhmmss", Locale.US).format(date) + " UTC";
        for (int i = 0; i < program.length(); i++)
            line[i] = program.charAt(i);
        for (int i = 0; i < agency.length(); i++)
            line[i + 20] = agency.charAt(i);
        for (int i = 0; i < dateCreation.length(); i++)
            line[i + 40] = dateCreation.charAt(i);
        writeLine("PGM / RUN BY / DATE");


        //COMMENT
        resetLine();
        for (int i = 2; i < 58; i++)
            line[i] = '-';
        writeLine("COMMENT");
        resetLine();
        String commentLineOne = "Generated by GnssRecord application.";
        for (int i = 0; i < commentLineOne.length(); i++)
            line[i + 9] = commentLineOne.charAt(i);
        writeLine("COMMENT");
        resetLine();
        String commentLineTwo = "This application belong to CS#28 at KMUTNB.";
        for (int i = 0; i < commentLineTwo.length(); i++)
            line[i + 9] = commentLineTwo.charAt(i);
        writeLine("COMMENT");
        resetLine();
        for (int i = 2; i < 58; i++)
            line[i] = '-';
        writeLine("COMMENT");


        //MARKER NAME
        resetLine();
        for (int i = 0; i < rinexHeader.getMarkName().length(); i++)
            line[i] = rinexHeader.getMarkName().charAt(i);
        writeLine("MARKER NAME");


        //MARKER TYPE
        resetLine();
        for (int i = 0; i < rinexHeader.getMarkType().length(); i++)
            line[i] = rinexHeader.getMarkType().toUpperCase().charAt(i);
        writeLine("MARKER TYPE");


        //OBSERVER / AGENCY
        resetLine();
        for (int i = 0; i < rinexHeader.getObserverName().length(); i++)
            line[i] = rinexHeader.getObserverName().charAt(i);
        for (int i = 0; i < rinexHeader.getObserverAgencyName().length(); i++)
            line[i + 20] = rinexHeader.getObserverAgencyName().charAt(i);
        writeLine("OBSERVER / AGENCY");


        //REC # / TYPE / VERS
        resetLine();
        for (int i = 0; i < rinexHeader.getReceiverNumber().length(); i++)
            line[i] = rinexHeader.getReceiverNumber().charAt(i);
        for (int i = 0; i < rinexHeader.getReceiverType().length(); i++)
            line[i + 20] = rinexHeader.getReceiverType().charAt(i);
        for (int i = 0; i < rinexHeader.getReceiverVersion().length(); i++)
            line[i + 40] = rinexHeader.getReceiverVersion().charAt(i);
        writeLine("REC # / TYPE / VERS");


        //ANT # / TYPE
        resetLine();
        for (int i = 0; i < rinexHeader.getAntennaNumber().length(); i++)
            line[i] = rinexHeader.getAntennaNumber().charAt(i);
        for (int i = 0; i < rinexHeader.getAntennaType().length(); i++)
            line[i + 20] = rinexHeader.getAntennaType().charAt(i);
        writeLine("ANT # / TYPE");


        //APPROX POSITION XYZ
        resetLine();
        String xPosition = String.format("%.4f", rinexHeader.getCartesianX());
        String yPosition = String.format("%.4f", rinexHeader.getCartesianY());
        String zPosition = String.format("%.4f", rinexHeader.getCartesianZ());
        for (int i = 0; i < xPosition.length(); i++)
            line[i + 1] = xPosition.charAt(i);
        for (int i = 0; i < yPosition.length(); i++)
            line[i + 16] = yPosition.charAt(i);
        for (int i = 0; i < zPosition.length(); i++)
            line[i + 30] = zPosition.charAt(i);
        writeLine("APPROX POSITION XYZ");


        //ANTENNA: DELTA H/E/N
        resetLine();
        String hDelta = String.format("%.4f", rinexHeader.getAntennaHeight());
        String eDelta = String.format("%.4f", rinexHeader.getAntennaEccentricityEast());
        String nDelta = String.format("%.4f", rinexHeader.getAntennaEccentricityNorth());
        for (int i = 0; i < hDelta.length(); i++)
            line[i + 8] = hDelta.charAt(i);
        for (int i = 0; i < eDelta.length(); i++)
            line[i + 22] = eDelta.charAt(i);
        for (int i = 0; i < nDelta.length(); i++)
            line[i + 36] = nDelta.charAt(i);
        writeLine("ANTENNA: DELTA H/E/N");


        //SYS / # / OBS TYPES
        String gSys = "G    4 C1C L1C D1C S1C";
        String rSys = "R    4 C1C L1C D1C S1C";
        String eSys = "E    4 C1B L1B D1B S1B";
        String cSys = "C    4 C2I L2I D2I S2I";
        String jSys = "J    4 C1C L1C D1C S1C";
        resetLine();
        for (int i = 0; i < gSys.length(); i++)
            line[i] = gSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");

        resetLine();
        for (int i = 0; i < rSys.length(); i++)
            line[i] = rSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");

        resetLine();
        for (int i = 0; i < eSys.length(); i++)
            line[i] = eSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");

        resetLine();
        for (int i = 0; i < cSys.length(); i++)
            line[i] = cSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");

        resetLine();
        for (int i = 0; i < jSys.length(); i++)
            line[i] = jSys.charAt(i);
        writeLine("SYS / # / OBS TYPES");


        //TIME OF FIRST OBS
        resetLine();
        String year = new SimpleDateFormat("yyyy", Locale.US).format(date);
        String month = new SimpleDateFormat("M", Locale.US).format(date);
        String day = new SimpleDateFormat("d", Locale.US).format(date);
        String hour = new SimpleDateFormat("h", Locale.US).format(date);
        String min = new SimpleDateFormat("m", Locale.US).format(date);
        String sec = new SimpleDateFormat("ss.SSSSSSS", Locale.US).format(date);
        String system = "GLO";
        for (int i = 0; i < year.length(); i++)
            line[5 - i] = year.charAt(year.length() - 1 - i);
        for (int i = 0; i < month.length(); i++)
            line[11 - i] = month.charAt(month.length() - 1 - i);
        for (int i = 0; i < day.length(); i++)
            line[17 - i] = day.charAt(day.length() - 1 - i);
        for (int i = 0; i < hour.length(); i++)
            line[23 - i] = hour.charAt(hour.length() - 1 - i);
        for (int i = 0; i < min.length(); i++)
            line[29 - i] = min.charAt(min.length() - 1 - i);
        for (int i = 0; i < sec.length(); i++)
            line[42 - i] = sec.charAt(sec.length() - 1 - i);
        for (int i = 0; i < system.length(); i++)
            line[50 - i] = system.charAt(system.length() - 1 - i);
        writeLine("TIME OF FIRST OBS");


        //SYS / PHASE SHIFTS
        resetLine();
        for (char aSatelliteIdentifier : satelliteIdentifier) {
            line[0] = aSatelliteIdentifier;
            writeLine("SYS / PHASE SHIFTS");
        }


        //END OF HEADER
        resetLine();
        writeLine("END OF HEADER");
    }

    public void writeData(List<RinexData> dataList) {
        Log.i(TAG, "writeData");
        Date date = new Date();

        //Date time and total (Title)
        resetLine();
        String year = new SimpleDateFormat("yyyy", Locale.US).format(date);
        String month = new SimpleDateFormat("M", Locale.US).format(date);
        String day = new SimpleDateFormat("d", Locale.US).format(date);
        String hour = new SimpleDateFormat("h", Locale.US).format(date);
        String min = new SimpleDateFormat("m", Locale.US).format(date);
        String sec = new SimpleDateFormat("ss.SSSSSSS", Locale.US).format(date);
        String type = "0";
        String total = String.valueOf(dataList.size());
        line[0] = '>';
        for (int i = 0; i < year.length(); i++)
            line[5 - i] = year.charAt(year.length() - 1 - i);
        for (int i = 0; i < month.length(); i++)
            line[8 - i] = month.charAt(month.length() - 1 - i);
        for (int i = 0; i < day.length(); i++)
            line[11 - i] = day.charAt(day.length() - 1 - i);
        for (int i = 0; i < hour.length(); i++)
            line[14 - i] = hour.charAt(hour.length() - 1 - i);
        for (int i = 0; i < min.length(); i++)
            line[17 - i] = min.charAt(min.length() - 1 - i);
        for (int i = 0; i < sec.length(); i++)
            line[28 - i] = sec.charAt(sec.length() - 1 - i);
        for (int i = 0; i < type.length(); i++)
            line[31 - i] = type.charAt(type.length() - 1 - i);
        for (int i = 0; i < total.length(); i++)
            line[34 - i] = total.charAt(total.length() - 1 - i);
        writeLine("");


        //Data (content)
        for (RinexData data : dataList) {
            resetLine();
            String satellite = data.getSatellite();
            String pseudoRange = String.format("%.3f", data.getPseudoRange());
            String carrierPhase = String.format("%.4f", data.getCarrierPhase());
            String doppler = String.format("%.3f", data.getDoppler());
            String signalStrength = String.format("%.3f", data.getSignalStrength());
            for (int i = 0; i < satellite.length(); i++)
                line[2 - i] = satellite.charAt(satellite.length() - 1 - i);
            for (int i = 0; i < pseudoRange.length(); i++)
                line[16 - i] = pseudoRange.charAt(pseudoRange.length() - 1 - i);
            for (int i = 0; i < carrierPhase.length(); i++)
                line[33 - i] = carrierPhase.charAt(carrierPhase.length() - 1 - i);
            for (int i = 0; i < doppler.length(); i++)
                line[48 - i] = doppler.charAt(doppler.length() - 1 - i);
            for (int i = 0; i < signalStrength.length(); i++)
                line[64 - i] = signalStrength.charAt(signalStrength.length() - 1 - i);
            writeLine("");
        }
    }
}